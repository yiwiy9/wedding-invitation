.devcontainer/Dockerfileにコンテナ（実行環境）の設定が書かれている
=> 例えば、serverlessframeworkのインストールとか、FROM node:16-buster-slimでnodeのイメージを元にイメージを自作とか

.devcontainer/entrypoint.shはコンテナ作成時に実行されるコマンド（serverless frameworkにAWSアカウントを紐付けるとか、依存パッケージのインストールとか）

.devcontainer/devcontainar.jsonで起動するコンテナのイメージとか拡張機能とかeslintとかの設定が書かれていて、それがリモート接続により共有される

package.jsonに外部ライブラリの情報（宣言）（reactとか）が書かれている

yarn.lockが実際に外部ライブラリのバージョンとかの依存関係を全て解決した状態の情報を持っている

"yarn"コマンドでpackage.json、厳密にはyarn.lockを元にnode_modules（実体、reactとかのコード）を作る

node_modulesはパッケージ群のローカルのインストール先ディレクトリ、パッケージ（外部ライブラリ）のコードの置き場

.eslintrc.jsonはeslintの設定ファイル（ルールが書かれている、これをもとに解析する）

.prettierrcはprettierの設定ファイル（どのようなコードフォーマットにするのか）

.husky/pre-commitでコミット前にlinter走らせている

huskyはgitフック（gitリポジトリに特定のイベントが生じるたびに自動で実行されるスクリプト）を管理するツール

serverless.ymlにはserverlessの設定を行うファイル=>lambda functionの設定、lambda functionのトリガーとなるイベントの定義（httpリクエストに対するラムダの割り当て）

backend/handler.tsは実際のラムダ関数が書かれている。httpリクエストによって該当の関数が呼ばれ、json形式のリソースを返したり、DBを操作したりする

SPAアプリケーションとしての初めの1ページはamazonのS3において公開している。そのページのjavascriptのコードがapi経由でラムダ関数とやり取りする。
