openapi: 3.0.2
info:
  title: Wedding Invitation API
  version: 1.0.0
paths:
  /users:
    post:
      operationId: postUser
      summary: 新規ユーザーの作成
      tags:
        - User
      requestBody:
        $ref: '#/components/requestBodies/PostUser'
      responses:
        '201':
          $ref: '#/components/responses/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UserValidationError'
  /samples:
    get:
      operationId: getSamples
      summary: サンプル：メールの一覧を取得
      tags:
        - Sample
      responses:
        '200':
          $ref: '#/components/responses/Samples'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      operationId: postSample
      summary: サンプル：新規メールの作成
      tags:
        - Sample
      requestBody:
        $ref: '#/components/requestBodies/PostSample'
      responses:
        '201':
          $ref: '#/components/responses/Sample'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/SampleValidationError'
components:
  requestBodies:
    PostUser:
      description: 新規ユーザーの作成用リクエストボディ
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/User'
              - type: object
                properties:
                  children:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserBase'
                required:
                  - children
    PostSample:
      description: サンプル：新規メールの作成用リクエストボディ
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Sample'
  responses:
    User:
      description: 単一ユーザーのレスポンスボディ
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    UserValidationError:
      description: ユーザーバリデーションエラーのレスポンスボディ
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserValidationError'
    Sample:
      description: 単一サンプルのレスポンスボディ
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Sample'
    Samples:
      description: 複数サンプルのレスポンスボディ
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Sample'
    SampleValidationError:
      description: サンプルバリデーションエラーのレスポンスボディ
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SampleValidationError'
    NotFound:
      description: 共通の404エラーレスポンスボディ
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'
  schemas:
    UserBase:
      type: object
      properties:
        familyNameKanji:
          type: string
          maxLength: 255
          example: 山田
        givenNameKanji:
          type: string
          maxLength: 255
          example: 太郎
        familyNameKana:
          type: string
          maxLength: 255
          example: やまだ
        givenNameKana:
          type: string
          maxLength: 255
          example: たろう
        allergy:
          type: string
          maxLength: 255
          example: 卵
      required:
        - familyNameKanji
        - givenNameKanji
        - familyNameKana
        - givenNameKana
    User:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          properties:
            isAttend:
              type: boolean
              example: true
            zipCode:
              type: string
              pattern: ^\d{7}$
              example: 1234567
            address1:
              type: string
              maxLength: 255
              example: 東京都ｘｘ区ｘｘｘ 1-1-1
            address2:
              type: string
              maxLength: 255
              example: ｘｘマンション 101号室
            email:
              type: string
              format: email
              example: yamada@example.com
            tel:
              type: string
              format: ^0\d{9,10}$
              example: 09012345678
            message:
              type: string
              maxLength: 255
              example: おめでとう！
          required:
            - isAttend
            - zipCode
            - address1
            - address2
            - email
    UserValidationError:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
            enum:
              - familyNameKanji
              - givenNameKanji
              - familyNameKana
              - givenNameKana
              - allergy
              - isAttend
              - zipCode
              - address1
              - address2
              - email
              - tel
              - message
              - children
            example: email
          reason:
            type: string
            example: email is invalid.
        required:
          - name
          - reason
    Sample:
      type: object
      properties:
        email:
          type: string
          format: email
          example: wedding@example.com
      required:
        - email
    SampleValidationError:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
            enum:
              - email
            example: email
          reason:
            type: string
            example: email is invalid.
        required:
          - name
          - reason
    NotFound:
      type: object
      properties:
        message:
          type: string
          example: Not found.
      required:
        - message
